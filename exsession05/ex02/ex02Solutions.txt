if we set p[-1] = 42, this means we set the integer before the memory block and this is not good. Because it sets the value before the memoryarray starts to 42.

p = points to the address of the array.
*p = shows the address of the first element p[0] of the array. 
&p = shows the address where the whole array is stored
*(p+1) = we assign to the next value starting from the 0 index of *p, here p[1]
*p+1 = if there is a value or not it adds +1 to it. So if no value there we get 0+1 = 1; 
*q = p-1; -> it shifts one block to the left from the memory. So if p = 16; then *q = 12; it shifts 4 bits
q[0] = the value before the array p starts. if we shift it to q[1] == p[0]
*(q+10) = gives me the value -1 with this error: malloc: *** error for object 0x3060a1630: pointer being freed was not allocated
*(q+11) = returns an address value, since we point out of the allocated memory of the size 10.

M = is the location of a memory address of a memory address of an integer, which points to two arrays.
*M = gives me the location of the address before the next location since we have a address->address->integer; In this case we could access values from first or second array like this *M[1]
**M = points to the first element of the memoryaddress, in this case to 0;
M[1][3] = 8;
*(M[0]+1) = 0+1 -> 1;
*(*(M+1)+3) = 8 since we point with M+1 to the second arrays first element and get 5 + 3 = 8
 
